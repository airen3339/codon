# (c) 2022 Exaloop Inc. All rights reserved.


# Warning(!): This type must be consistent with the exception
# header type defined in runtime/exc.cpp.
class BaseException:
    typename: str
    message: str
    func: str
    file: str
    line: int
    col: int

    def __init__(self, typename: str, message: str = ""):
        self.typename = typename
        self.message = message
        self.func = ""
        self.file = ""
        self.line = 0
        self.col = 0

    def __str__(self):
        return self.message

    def __repr__(self):
        return f'{self.typename}({self.message.__repr__()})'


class Exception(BaseException):
    def __init__(self, typename: str, msg: str = ""):
        super().__init__(typename, msg)


class NameError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("NameError", message)


class OSError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("OSError", message)


class IOError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("IOError", message)


class ValueError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("ValueError", message)


class IndexError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("IndexError", message)


class KeyError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("KeyError", message)


class OverflowError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("OverflowError", message)


class CError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("CError", message)


class PyError(Exception):
    pytype: str

    def __init__(self, message: str, pytype: str):
        super().__init__("PyError", message)
        self.pytype = pytype


class TypeError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("TypeError", message)


class ZeroDivisionError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("ZeroDivisionError", message)


class AttributeError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("AttributeError", message)


class NotImplementedError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("NotImplementedError", message)


class StopIteration(Exception):
    def __init__(self, message: str = ""):
        super().__init__("StopIteration", message)


class AssertionError(Exception):
    def __init__(self, message: str = ""):
        super().__init__("AssertionError", message)


class SystemExit(BaseException):
    _status: int

    def __init__(self, message: str = "", status: int = 0):
        super().__init__("SystemExit", message)
        self._status = status

    def __init__(self, status: int):
        self.__init__("", status)

    @property
    def status(self):
        return self._status

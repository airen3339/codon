# (c) 2022 Exaloop Inc. All rights reserved.


@extend
class Optional:
    def __new__() -> Optional[T]:
        if isinstance(T, ByVal):
            return __internal__.opt_tuple_new(T)
        else:
            return __internal__.opt_ref_new(T)

    def __new__(what: T) -> Optional[T]:
        if isinstance(T, ByVal):
            return __internal__.opt_tuple_new_arg(what, T)
        else:
            return __internal__.opt_ref_new_arg(what, T)

    def __bool__(self) -> bool:
        if isinstance(T, ByVal):
            return __internal__.opt_tuple_bool(self, T)
        else:
            return __internal__.opt_ref_bool(self, T)

    def __get__(self) -> T:
        if isinstance(T, ByVal):
            return __internal__.opt_tuple_invert(self, T)
        else:
            return __internal__.opt_ref_invert(self, T)

    def __invert__(self) -> T:
        if isinstance(T, ByVal):
            return __internal__.opt_tuple_invert(self, T)
        else:
            return __internal__.opt_ref_invert(self, T)

    def __str__(self) -> str:
        return "None" if not self else str(~self)

    def __repr__(self) -> str:
        return "None" if not self else (~self).__repr__()

    def __is_optional__(self, other: Optional[T]) -> bool:
        if (not self) or (not other):
            return (not self) and (not other)
        return self.__invert__() is other.__invert__()


optional = Optional


def unwrap(opt: Optional[T], T: type) -> T:
    if opt is None:
        raise ValueError("optional is None")
    return ~opt

# (c) 2022 Exaloop Inc. All rights reserved.

from internal.gc import sizeof as _sizeof

@__attribute__
def kernel():
    pass

@tuple
class Device:
    _device: i32

    def __new__(device: int):
        from C import seq_nvptx_device(int) -> i32
        return Device(seq_nvptx_device(device))

    @staticmethod
    def count():
        from C import seq_nvptx_device_count() -> int
        return seq_nvptx_device_count()

    def __str__(self):
        from C import seq_nvptx_device_name(i32) -> str
        return seq_nvptx_device_name(self._device)

    def __index__(self):
        return int(self._device)

    def __bool__(self):
        return True

    @property
    def compute_capability(self):
        from C import seq_nvptx_device_capability(i32) -> int
        c = seq_nvptx_device_capability(self._device)
        return (c >> 32, c & 0xffffffff)

@tuple
class Memory[T]:
    _ptr: Ptr[byte]

    def _alloc(n: int, T: type):
        from C import seq_nvptx_device_alloc(int) -> Ptr[byte]
        return Memory[T](seq_nvptx_device_alloc(n * _sizeof(T)))

    def _read(self, p: Ptr[T], n: int):
        from C import seq_nvptx_memcpy_d2h(Ptr[byte], Ptr[byte], int)
        seq_nvptx_memcpy_d2h(p.as_byte(), self._ptr, n * _sizeof(T))

    def _write(self, p: Ptr[T], n: int):
        from C import seq_nvptx_memcpy_h2d(Ptr[byte], Ptr[byte], int)
        seq_nvptx_memcpy_h2d(self._ptr, p.as_byte(), n * _sizeof(T))

    def _free(self):
        from C import seq_nvptx_device_free(Ptr[byte])
        seq_nvptx_device_free(self._ptr)

@llvm
def syncthreads() -> None:
    declare void @llvm.nvvm.barrier0()
    call void @llvm.nvvm.barrier0()
    ret {} {}

@tuple
class Dim:
    _x: u32
    _y: u32
    _z: u32

    @property
    def x(self):
        return int(self._x)

    @property
    def y(self):
        return int(self._y)

    @property
    def z(self):
        return int(self._z)

def thread():
    @pure
    @llvm
    def get_x() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.tid.x()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
        ret i32 %res

    @pure
    @llvm
    def get_y() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.tid.y()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.tid.y()
        ret i32 %res

    @pure
    @llvm
    def get_z() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.tid.z()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.tid.z()
        ret i32 %res

    return Dim(get_x(), get_y(), get_z())

def block():
    @pure
    @llvm
    def get_x() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
        ret i32 %res

    @pure
    @llvm
    def get_y() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.y()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y()
        ret i32 %res

    @pure
    @llvm
    def get_z() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.z()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z()
        ret i32 %res

    return Dim(get_x(), get_y(), get_z())

def block_dim():
    @pure
    @llvm
    def get_x() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
        ret i32 %res

    @pure
    @llvm
    def get_y() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.ntid.y()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.ntid.y()
        ret i32 %res

    @pure
    @llvm
    def get_z() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.ntid.z()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.ntid.z()
        ret i32 %res

    return Dim(get_x(), get_y(), get_z())

def grid_dim():
    @pure
    @llvm
    def get_x() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.nctaid.x()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x()
        ret i32 %res

    @pure
    @llvm
    def get_y() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.nctaid.y()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y()
        ret i32 %res

    @pure
    @llvm
    def get_z() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.nctaid.z()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.nctaid.z()
        ret i32 %res

    return Dim(get_x(), get_y(), get_z())

def warpsize():
    @pure
    @llvm
    def _warpsize() -> u32:
        declare i32 @llvm.nvvm.read.ptx.sreg.warpsize()
        %res = call i32 @llvm.nvvm.read.ptx.sreg.warpsize()
        ret i32 %res

    return int(warpsize)

def _launch(f: cobj, grid: Tuple[int,int,int], block: Tuple[int,int,int], params, shared_mem: int = 0):
    from C import seq_nvptx_invoke(cobj, u32, u32, u32, u32, u32, u32, u32, cobj)
    seq_nvptx_invoke(f, u32(grid[0]), u32(grid[1]), u32(grid[2]), u32(block[0]),
                     u32(block[1]), u32(block[2]), u32(shared_mem), __ptr__(params).as_byte())

def kernel(fn, *args):
    from C import seq_nvptx_function(Ptr[byte]) -> cobj
    from C import seq_nvptx_invoke(cobj, u32, u32, u32, u32, u32, u32, u32, cobj)

    def offsets(t):
        @pure
        @llvm
        def offsetof(t: T, i: Static[int], T: type, S: type) -> int:
            %p = getelementptr {=T}, {=T}* null, i64 0, i32 {=i}
            %s = ptrtoint {=S}* %p to i64
            ret i64 %s

        if staticlen(t) == 0:
            return ()
        else:
            T = type(t)
            S = type(t[-1])
            return (*offsets(t[:-1]), offsetof(t, staticlen(t) - 1, T, S))

    kernel_ptr = seq_nvptx_function("kernel_0".ptr)  # TODO: use fn name

    def wrapper(*args, grid: Tuple[int,int,int], block: Tuple[int,int,int]):
        p = __ptr__(args)
        arg_ptrs = tuple((p + offset) for offset in offsets(t))
        seq_nvptx_invoke(kernel_ptr, u32(grid[0]), u32(grid[1]), u32(grid[2]), u32(block[0]),
                         u32(block[1]), u32(block[2]), u32(shared_mem), __ptr__(arg_ptrs).as_byte())

    return wrapper

@extend
class List:
    def __to_gpu__(self):
        n = len(self)
        mem = Memory._alloc(n, T)
        mem._write(self.arr.ptr, n)
        return mem._ptr

    def __from_gpu__(self, p: Ptr[byte]):
        mem = Memory[T](p)
        n = len(self)
        mem._read(self.arr.ptr, n)
        mem._free()

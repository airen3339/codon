# (c) 2022 Exaloop Inc. All rights reserved.

@__attribute__
def kernel():
    pass

@tuple
class Device:
    _device: i32

    def __new__(device: int):
        from C import seq_nvptx_device(int) -> i32
        return Device(seq_nvptx_device(device))

    @staticmethod
    def count():
        from C import seq_nvptx_device_count() -> int
        return seq_nvptx_device_count()

    def __str__(self):
        from C import seq_nvptx_device_count(i32) -> str
        return seq_nvptx_device_count(self._device)

    def __index__(self):
        return int(self._device)

    def __bool__(self):
        return True

    @property
    def compute_capability(self):
        from C import seq_nvptx_device_capability(i32) -> int
        c = seq_nvptx_device_capability(self._device)
        return (c >> 32, c & 0xffffffff)

@tuple
class Memory:
    _ptr: u32

    def __new__(size: int):
        from C import seq_nvptx_device_alloc(int) -> u32
        return Memory(seq_nvptx_device_alloc(size))

    def read(self, p: Ptr[T], n: int, T: type):
        from C import seq_nvptx_memcpy_d2h(Ptr[byte], u32, int)
        from internal.gc import sizeof
        seq_nvptx_memcpy_d2h(p.as_byte(), self._ptr, n * sizeof(T))

    def write(self, p: Ptr[T], n: int, T: type):
        from C import seq_nvptx_memcpy_h2d(u32, Ptr[byte], int)
        from internal.gc import sizeof
        seq_nvptx_memcpy_h2d(self._ptr, p.as_byte(), n * sizeof(T))
